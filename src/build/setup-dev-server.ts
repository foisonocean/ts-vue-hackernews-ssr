import { join } from 'path';

import * as webpack from 'webpack';
import * as createDevMiddleware from 'webpack-dev-middleware';
import * as createHotMiddleware from 'webpack-hot-middleware';
import * as MemoryFileSystem from 'memory-fs';
import { Express } from 'express-serve-static-core';

import clientConfig from './webpack.client.config';
import serverConfig from './webpack.server.config';

const readFile = (fs: any, file: string) => {
  try {
    // HACK: Type Inference of `webpack-merge` is not good enough
    return fs.readFileSync(join((clientConfig.output as any).path as string, file), 'utf-8');
  // tslint:disable-next-line:no-empty
  } catch (e) {}
};

export function setupDevServer (app: Express, callback: (...params: any[]) => any) {
  let bundle: string;
  let clientManifest: any;
  let readyPromiseResolver: () => any;

  const readyPromise = new Promise(
    resolve => {
      readyPromiseResolver = resolve;
    },
  );

  const ready = (...args: any[]) => {
    readyPromiseResolver();
    callback(...args);
  };

  // Modify client config to work with hot middleware
  // HACK: Type Inference of `webpack-merge` is not good enough
  (clientConfig.entry as any).app = ['webpack-hot-middleware/client', (clientConfig.entry as any).app];
  (clientConfig.output as any).filename = '[name].js';
  (clientConfig.plugins as any[]).push(
    new webpack.HotModuleReplacementPlugin(),
    new webpack.NoEmitOnErrorsPlugin(),
  );

  // Dev middleware
  const clientCompiler = webpack(clientConfig);
  const devMiddleware = createDevMiddleware(
    clientCompiler,
    {
      publicPath: (clientConfig.output as any).publicPath as string,
      noInfo: true,
    },
  );
  clientCompiler.plugin('done', stats => {
    const statsInfo = stats.toJson();
    statsInfo.errors.forEach((err: string) => console.error(err));
    statsInfo.warnings.forEach((err: string) => console.warn(err));
    if (statsInfo.errors.length) return;

    clientManifest = JSON.parse(readFile(
      // HACK: .d.ts of `webpack-dev-middleware` doesn't support fileSystem
      (devMiddleware as any).fileSystem,
      'vue-ssr-client-manifest.json',
    ));
    if (bundle) {
      ready(bundle, {
        clientManifest,
      });
    }
  });

  // Hot middleware
  const hotMiddleware = createHotMiddleware(
    clientCompiler,
    {
      heartbeat: 5000,
    },
  );
  app.use(hotMiddleware);

  // Watch and update server renderer
  const serverCompiler = webpack(serverConfig);
  const mfs = new MemoryFileSystem();
  serverCompiler.outputFileSystem = mfs;
  serverCompiler.watch({}, (err, stats) => {
    if (err) throw err;
    const statsInfo = stats.toJson();
    if (statsInfo.errors.length) return;

    // Read bundle generated by vue-ssr-webpack-plugin
    bundle = JSON.parse(readFile(mfs, 'vue-ssr-server-bundle.json'));
    if (clientManifest) {
      ready(bundle, {
        clientManifest,
      });
    }
  });

  return readyPromise;
}

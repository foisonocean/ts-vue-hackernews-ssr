const { join } = require('path')
const webpack = require('webpack')
const MemoryFileSystem = require('memory-fs')
const createDevMiddleware = require('webpack-dev-middleware')
const createHotMiddleware = require('webpack-hot-middleware')

const clientConfig = require('./webpack.client.config')
const serverConfig = require('./webpack.server.config')

const readFile = (fs, file) => {
  try {
    return fs.readFileSync(
      join(clientConfig.output.path, file),
      'utf-8'
    )
  } catch (err) {}
}

function setupDevServer (app, callback) {
  let bundle
  let clientManifest

  let readyPromiseResolver

  const readyPromise = new Promise(resolve => {
    readyPromiseResolver = resolve
  })

  const ready = (...args) => {
    readyPromiseResolver()
    callback(...args)
  }

  // Modify client config to work with hot middleware
  clientConfig.entry.app = [
    'webpack-hot-middleware/client',
    clientConfig.entry.app,
  ]
  clientConfig.output.filename = '[name].js'
  clientConfig.plugins.push(
    new webpack.HotModuleReplacementPlugin(),
    new webpack.NoEmitOnErrorsPlugin()
  )

  // Dev middleware
  const clientCompiler = webpack(clientConfig)
  const devMiddleware = createDevMiddleware(clientCompiler, {
    publicPath: clientConfig.output.publicPath,
    noInfo: true,
  })
  app.use(devMiddleware)

  // See: https://webpack.js.org/api/plugins/compiler/#event-hooks
  clientCompiler.plugin('done', stats => {
    const info = stats.toJson()
    info.errors.forEach(err => {
      console.error(err)
    })
    info.warnings.forEach(err => {
      console.error(err)
    })

    if (stats.errors.length) {
      return
    }

    clientManifest = JSON.parse(
      readFile(
        devMiddleware.fileSystem,
        'vue-ssr-client-manifest.json'
      )
    )

    if (bundle) {
      ready(
        bundle,
        {
          clientManifest,
        }
      )
    }
  })

  // Hot middleware
  const hotMiddleware = createHotMiddleware(clientCompiler, { heartbeat: 5000 })
  app.use(hotMiddleware)

  // Watch and update server renderer
  const serverCompiler = webpack(serverConfig)
  const mfs = new MemoryFileSystem()
  serverCompiler.outputFileSystem = mfs
  serverCompiler.watch({}, (err, stats) => {
    if (err) {
      throw err
    }

    const info = stats.toJson()

    if (info.errors.length) {
      return
    }

    // Read bundle generated by vue-ssr-webpack-plugin
    bundle = JSON.parse(readFile(mfs, 'vue-ssr-server-bundle.json'))

    if (clientManifest) {
      ready(
        bundle,
        {
          clientManifest,
        }
      )
    }
  })

  return readyPromise
}

module.exports = setupDevServer
